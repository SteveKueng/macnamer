#!/usr/bin/env python

## Copyright 2014 Graham Gilbert
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at

## http://www.apache.org/licenses/LICENSE-2.0

## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.

import subprocess
import platform
from urllib2 import Request, urlopen, URLError, HTTPError
import urllib
import json
import os, sys
import re
import string
import shlex
import shutil
import math
from Foundation import *

###############################################################################
## No Editing needed!
###############################################################################

BUNDLE_ID = 'ch.srgssr.macnamer'
##This was lifted verbatim from the Munki project - hope Greg doesn't mind!

def set_pref(pref_name, pref_value):
    """Sets a preference, writing it to
        /Library/Preferences/ch.srgssr.macnamer.plist.
        This should normally be used only for 'bookkeeping' values;
        values that control the behavior of munki may be overridden
        elsewhere (by MCX, for example)"""
    try:
        CFPreferencesSetValue(
                              pref_name, pref_value, BUNDLE_ID,
                              kCFPreferencesAnyUser, kCFPreferencesCurrentHost)
        CFPreferencesAppSynchronize(BUNDLE_ID)
    except Exception:
        pass

def pref(pref_name):
    """Return a preference. Since this uses CFPreferencesCopyAppValue,
    Preferences can be defined several places. Precedence is:
        - MCX
        - /var/root/Library/Preferences/ch.srgssr.macnamer.plist
        - /Library/Preferences/ch.srgssr.macnamer.plist
        - default_prefs defined here.
    """
    default_prefs = {
        'ServerURL': 'http://macnamer',
    }
    pref_value = CFPreferencesCopyAppValue(pref_name, BUNDLE_ID)
    if pref_value == None:
        pref_value = default_prefs.get(pref_name)
        # we're using a default value. We'll write it out to
        # /Library/Preferences/<BUNDLE_ID>.plist for admin
        # discoverability
        set_pref(pref_name, pref_value)
    if isinstance(pref_value, NSDate):
        # convert NSDate/CFDates to strings
        pref_value = str(pref_value)
    return pref_value

if not os.geteuid()==0:
    sys.exit("\nOnly root can run this script\n")

theurl = pref('ServerURL')
pid = str(os.getpid())
pidfile = "/tmp/checkin.pid"

the_command = "ioreg -c \"IOPlatformExpertDevice\" | awk -F '\"' '/IOPlatformSerialNumber/ {print $4}'"

if os.path.isfile(pidfile):
    print "%s already exists, exiting" % pidfile
    sys.exit()
else:
    file(pidfile, 'w').write(pid)
serial = subprocess.Popen(the_command,shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0]
serial = re.sub(r'\s', '', serial)

req = Request(theurl + "/" + serial)
auth = pref('authKey')
if auth:
    req.add_header("Authorization", "%s" % auth)

try:
    response = urlopen(req)
except URLError, e:
    if hasattr(e, 'reason'):
        print 'We failed to reach a server.'
        print 'Reason: ', e.reason
        os.unlink(pidfile)
    elif hasattr(e, 'code'):
        print 'The server couldn\'t fulfill the request'
        print 'Error code: ', e.code
        os.unlink(pidfile)
else:
    # got the data from the server, time to get to work!
    os.unlink(pidfile)
    data = response.read()
    data = json.loads(data)[0]['fields']
    name = data['hostname']

    if name:
        # there's a name there, now to see if we need to exit
        theprocess = "scutil --get ComputerName"
        oldname = subprocess.Popen(theprocess,shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0]
        oldname = oldname.strip()
        newname = name.strip()

        # set the local hostname
        localname = name.replace(' ', '-')
        theprocess = "scutil --get LocalHostName"
        oldname = subprocess.Popen(theprocess,shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0].strip()
        if localname != oldname:
            theprocess = "scutil --set LocalHostName" + " " +localname
            p = subprocess.Popen(theprocess,shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0]
        else:
            print "LocalHostName not need to change"

        #set the bonjour name
        desiredname = name
        theprocess = "scutil --get ComputerName"
        oldname = subprocess.Popen(theprocess,shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0].strip()
        if oldname != desiredname:
            theprocess = "scutil --set ComputerName" + " \"" +desiredname + "\""
            p = subprocess.Popen(theprocess,shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0]
        else:
            print "ComputerName not need to change"
        
        ##if a domain is set, set the full hostname
        localname = newname
        theprocess = "scutil --get HostName"
        oldhostname = subprocess.Popen(theprocess,shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0].strip()
        
        if oldhostname != localname:
            theprocess = "scutil --set HostName" + " " +newname
            p = subprocess.Popen(theprocess,shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0]
        else:
            print "HostName not need to change"
        #we're done
